generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  email         String     @unique
  emailVerified DateTime?
  id            String     @id @unique @default(cuid())
  image         String?
  password      String
  firstName     String
  lastName      String
  created       DateTime   @default(now())
  accounts      Account[]
  employee      Employee?
  questions     Question[]
  sessions      Session[]
}

model Employee {
  id         Int     @id @default(autoincrement())
  userId     String  @unique
  isApproved Boolean @default(false)
  companyID  String
  company    Company @relation(fields: [companyID], references: [id], onDelete: Cascade)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model testID {
  companyID      String
  created        DateTime  @default(now())
  templateID     String?
  expirationDate DateTime?
  jobId          String?
  id             String    @id @unique @default(cuid())
  email          String
  firstName      String
  lastName       String
  score          String?
  status         String    @default("Not Sent")
  submitted      Boolean   @default(false)
  endTime        DateTime?
  startTime      DateTime?
  instructions   String    @default("")
  isSample       Boolean   @default(false) // <-- Indicates if it's a sample testID
  company        Company   @relation(fields: [companyID], references: [id], onDelete: Cascade)
  Job            Job?      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  template       Question? @relation(fields: [templateID], references: [id], onDelete: Cascade)
  job            Job?      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  gradingInsights String?   @default("")
}

model Question {
  id              String   @id @unique @default(cuid())
  companyID       String
  title           String
  language        String
  framework       String?
  type            String
  userId          String
  expiration      String   @default("1 month")
  prompt          String   @default("")
  company         Company  @relation(fields: [companyID], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  testIDs         testID[]
}

model Company {
  id        String     @id @unique @default(cuid())
  name      String
  join_code String     @unique
  employees Employee[]
  Job       Job[]
  questions Question[]
  testIDs   testID[]
  jobs      Job[] 
}
model Job {
  id        String    @id @default(cuid())
  name      String
  companyId String
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  applicants testID[] // <--- NEW: each Job can have multiple applicants (testIDs)
}

model Job {
  id        String     @id
  name      String
  companyId String
  createdAt DateTime   @default(now())
  updatedAt DateTime
  Company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Question  Question[]
  testID    testID[]
}
