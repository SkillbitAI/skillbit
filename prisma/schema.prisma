// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}
datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @unique
  firstName     String
  lastName      String
  password      String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  employee Employee?
  questions Question[]
  created DateTime @default(now())
}

//Pivot table to connect user and company
model Employee {
  id Int @id @default(autoincrement())
  userId String @unique
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  isApproved Boolean @default(false)
  companyID String
  company Company @relation(fields: [companyID], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model testID {
  id String @id @default(cuid()) @unique
  firstName     String
  lastName      String
  email         String
  companyID String
  company         Company     @relation(fields: [companyID], references: [id], onDelete: Cascade)
  templateID String?
  template Question? @relation(fields: [templateID], references: [id], onDelete: Cascade)
  status        String @default("Unsent")
  score         String?
  expirationDate DateTime?
  startTime     DateTime? 
  endTime       DateTime? 
  created DateTime @default(now())
  submitted Boolean @default(false)
}

//THIS IS THE TEMPLATE FOR THE QUESTION
model Question {
  id String @id @default(cuid()) @unique
  companyID String
  company Company @relation(fields: [companyID], references: [id], onDelete: Cascade)
  title String
  language String
  framework String?
  prompt String @default("")
  expiration String @default("1 month")
  type String
  userId String
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  testIDs testID[]
  candidatePrompt String @default("")
}
model Company {
  id String @id @default(cuid()) @unique
  name String
  testIDs testID[]
  employees Employee[]
  questions Question[]
  join_code String @unique
}